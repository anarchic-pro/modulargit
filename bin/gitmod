#!/bin/bash

# Debug function
debug() {
    if [[ "${GITMODS_DEBUG}" == "true" ]]; then
        echo "$1"
    fi
}

# Get the real path of the script (resolving symlinks)
SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[0]}")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

# Function to check if a file exists and is readable
check_file_readable() {
    if [[ ! -f "$1" || ! -r "$1" ]]; then
        echo "Error: Cannot read file $1"
        exit 1
    fi
}

# Function to check if a directory exists and is readable
check_dir_readable() {
    if [[ ! -d "$1" || ! -r "$1" ]]; then
        echo "Error: Cannot access directory $1"
        exit 1
    fi
}

# Set default cmds directory
CMD_DIR="$SCRIPT_DIR/../cmd"

# If .gitcmd exists, read it
CMD_CONFIG_FILE="$HOME/.gitcmd"
if [[ -f "$CMD_CONFIG_FILE" && -r "$CMD_CONFIG_FILE" ]]; then
    # Read the cmds directory path from the first line
    CUSTOM_CMD_DIR=$(head -n 1 "$CMD_CONFIG_FILE")
    if [[ "$CUSTOM_CMD_DIR" == "DEFAULT" ]]; then
        CUSTOM_CMD_DIR=$CMD_DIR
    fi
    if [[ -n "$CUSTOM_CMD_DIR" ]]; then
        CMD_DIR="${CUSTOM_CMD_DIR/#\~/$HOME}"  # Expand ~ to full home path
    fi
    # Read enabled cmds (skip the first line)
    ENABLED_CMD=($(tail -n +2 "$CMD_CONFIG_FILE"))
else
    debug "No config file found at $CMD_CONFIG_FILE, using nothing from $CMD_DIR"
    ENABLED_CMD=()
fi

check_dir_readable "$CMD_DIR"

# Set default mods directory
MODS_DIR="$SCRIPT_DIR/../mods"

# If .gitmods exists, read it
CONFIG_FILE="$HOME/.gitmods"
if [[ -f "$CONFIG_FILE" && -r "$CONFIG_FILE" ]]; then
    # Read the mods directory path from the first line
    CUSTOM_MODS_DIR=$(head -n 1 "$CONFIG_FILE")
    if [[ "$CUSTOM_MODS_DIR" == "DEFAULT" ]]; then
        CUSTOM_MODS_DIR=$MODS_DIR
    fi
    if [[ -n "$CUSTOM_MODS_DIR" ]]; then
        MODS_DIR="${CUSTOM_MODS_DIR/#\~/$HOME}"  # Expand ~ to full home path
    fi
    # Read enabled mods (skip the first line)
    ENABLED_MODS=($(tail -n +2 "$CONFIG_FILE"))
else
    debug "No config file found at $CONFIG_FILE, using nothing from $MODS_DIR"
    ENABLED_MODS=()
fi

check_dir_readable "$MODS_DIR"

# Check if first parameter matches an enabled command
CUSTOM_CMD=""
if [ $# -gt 0 ]; then
    for cmd in "${ENABLED_CMD[@]}"; do
        if [ "$1" == "$cmd" ]; then
            CUSTOM_CMD="$CMD_DIR/$cmd"
            debug "Found custom command: $CUSTOM_CMD"
            break
        fi
    done
fi

# Validate that all enabled mods exist and are executable
for mod in "${ENABLED_MODS[@]}"; do
    mod_path="$MODS_DIR/$mod"
    if [[ ! -f "$mod_path" || ! -x "$mod_path" ]]; then
        echo "Error: Mod '$mod' not found or not executable at $mod_path"
        exit 1
    fi
done

# First, run all mods with "check" parameter
debug "Running pre-checks..."
for mod in "${ENABLED_MODS[@]}"; do
    # Skip base-git module if we're using a custom command
    if [[ -n "$CUSTOM_CMD" && "$mod" == "base-git" ]]; then
        debug "Skipping base-git module check as using custom command"
        continue
    fi
    
    mod_path="$MODS_DIR/$mod"
    debug "Checking $mod..."
    if ! "$mod_path" check "$@"; then
        debug "($mod) Execution stopped "
        exit 1
    fi
done

# If all checks passed, run all mods with "run" parameter
debug "Running modules..."
for mod in "${ENABLED_MODS[@]}"; do
    # Skip base-git module if we're using a custom command
    if [[ -n "$CUSTOM_CMD" && "$mod" == "base-git" ]]; then
        debug "Skipping base-git module run as using custom command"
        continue
    fi
    
    mod_path="$MODS_DIR/$mod"
    debug "Running $mod..."
    if ! "$mod_path" run "$@"; then
        echo "Run failed for $mod"
        exit 1
    fi
done

# If we found a custom command, execute it
if [ -n "$CUSTOM_CMD" ]; then
    debug "Executing custom command: $CUSTOM_CMD"
    if [[ -x "$CUSTOM_CMD" ]]; then
        exec "$CUSTOM_CMD" "${@:2}"
    else
        echo "Error: Custom command '$CUSTOM_CMD' is not executable"
        exit 1
    fi
fi